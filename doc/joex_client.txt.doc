#### joex_client.txt - class description

joex_client - 

Please add @discuss section in ../src/joex_client.c.

This is the class interface:

```h
    //  This is a stable class, and may not change except for emergencies. It
    //  is provided in stable builds.
    //  Create a new joex_client, return the reference if successful,  
    //  or NULL if construction failed due to lack of available memory.
    JOEX_EXPORT joex_client_t *
        joex_client_new (void);
    
    //  Destroy the joex_client and free all memory used by the object.
    JOEX_EXPORT void
        joex_client_destroy (joex_client_t **self_p);
    
    //  Return actor, when caller wants to work with multiple actors and/or
    //  input sockets asynchronously.                                      
    JOEX_EXPORT zactor_t *
        joex_client_actor (joex_client_t *self);
    
    //  Return message pipe for asynchronous message I/O. In the high-volume case,
    //  we send methods and get replies to the actor, in a synchronous manner, and
    //  we send/recv high volume message data to a second pipe, the msgpipe. In   
    //  the low-volume case we can do everything over the actor pipe, if traffic  
    //  is never ambiguous.                                                       
    JOEX_EXPORT zsock_t *
        joex_client_msgpipe (joex_client_t *self);
    
    //  Return true if client is currently connected, else false. Note that the   
    //  client will automatically re-connect if the server dies and restarts after
    //  a successful first connection.                                            
    JOEX_EXPORT bool
        joex_client_connected (joex_client_t *self);
    
    //  Enable verbose tracing (animation) of state machine activity.
    JOEX_EXPORT void
        joex_client_set_verbose (joex_client_t *self, bool verbose);
    
    //  Self test of this class.
    JOEX_EXPORT void
        joex_client_test (bool verbose);
    
```

This is the class self test code:

```c
    //  Simple create/destroy test
    joex_client_t *self = joex_client_new ();
    assert (self);
    joex_client_destroy (&self);
```

