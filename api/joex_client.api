<!--
    ** WARNING *************************************************************
    THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose
    your changes at the next build cycle. This is great for temporary printf
    statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places
    for commits are:

     * The XML model used for this code generation: joex_client.xml, or
     * The code generation script that built this file: zproto_client_c
    ************************************************************************
 -->
<class name = "joex_client">
    JOEX Client

        Codec class for joex_client.
    <constructor>
        Create a new joex_client, return the reference if successful,
        or NULL if construction failed due to lack of available memory.
    </constructor>

    <destructor>
        Destroy the joex_client and free all memory used by the object.
    </destructor>

    <method name = "actor">
        Return actor, when caller wants to work with multiple actors and/or
        input sockets asynchronously.
        <return type = "zactor" />
    </method>

    <method name = "msgpipe">
        Return message pipe for asynchronous message I/O. In the high-volume case,
        we send methods and get replies to the actor, in a synchronous manner, and
        we send/recv high volume message data to a second pipe, the msgpipe. In
        the low-volume case we can do everything over the actor pipe, if traffic
        is never ambiguous.
        <return type = "zsock" />
    </method>

    <method name = "connected">
        Return true if client is currently connected, else false. Note that the
        client will automatically re-connect if the server dies and restarts after
        a successful first connection.
        <return type = "boolean" />
    </method>

    <method name = "connect">
        Connect to server endpoint, with specified timeout in msecs (zero means wait    
        forever). Constructor succeeds if connection is successful. The caller may      
        specify its address.                                                            
        Returns >= 0 if successful, -1 if interrupted.
        <argument name = "endpoint" type = "string">Endpoint to connect to</argument>
        <argument name = "timeout" type = "number" size = "4">Timeout in msecs</argument>
        <argument name = "address" type = "string">Unique address of caller, if any</argument>
        <return type = "integer" />
    </method>

    <method name = "status">
        Return last received status
        <return type = "integer" />
    </method>

    <method name = "reason">
        Return last received reason
        <return type = "string" />
    </method>

    <method name = "set verbose">
        Enable verbose tracing (animation) of state machine activity.
        <argument name = "verbose" type = "boolean" />
    </method>
</class>
