/*  =========================================================================
    joex_client - JOEX Client

    Codec class for joex_client.

    Copyright (c) the Contributors as noted in the AUTHORS file.       
    This file is part of CZMQ, the high-level C binding for 0MQ:       
    http://czmq.zeromq.org.                                            
                                                                       
    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.           
    =========================================================================
*/

#ifndef JOEX_CLIENT_H_INCLUDED
#define JOEX_CLIENT_H_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif

//  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
//  @warning Please edit the model at "api/joex_client.api" to make changes.
//  @interface
//  This is a stable class, and may not change except for emergencies. It
//  is provided in stable builds.
//  Create a new joex_client, return the reference if successful,  
//  or NULL if construction failed due to lack of available memory.
JOEX_EXPORT joex_client_t *
    joex_client_new (void);

//  Destroy the joex_client and free all memory used by the object.
JOEX_EXPORT void
    joex_client_destroy (joex_client_t **self_p);

//  Return actor, when caller wants to work with multiple actors and/or
//  input sockets asynchronously.                                      
JOEX_EXPORT zactor_t *
    joex_client_actor (joex_client_t *self);

//  Return message pipe for asynchronous message I/O. In the high-volume case,
//  we send methods and get replies to the actor, in a synchronous manner, and
//  we send/recv high volume message data to a second pipe, the msgpipe. In   
//  the low-volume case we can do everything over the actor pipe, if traffic  
//  is never ambiguous.                                                       
JOEX_EXPORT zsock_t *
    joex_client_msgpipe (joex_client_t *self);

//  Return true if client is currently connected, else false. Note that the   
//  client will automatically re-connect if the server dies and restarts after
//  a successful first connection.                                            
JOEX_EXPORT bool
    joex_client_connected (joex_client_t *self);

//  Connect to server endpoint, with specified timeout in msecs (zero means wait    
//  forever). Constructor succeeds if connection is successful. The caller may      
//  specify its address.                                                            
//  Returns >= 0 if successful, -1 if interrupted.                                  
JOEX_EXPORT int
    joex_client_connect (joex_client_t *self, const char *endpoint, uint32_t timeout, const char *address);

//  Return last received status
JOEX_EXPORT int
    joex_client_status (joex_client_t *self);

//  Return last received reason
JOEX_EXPORT const char *
    joex_client_reason (joex_client_t *self);

//  Enable verbose tracing (animation) of state machine activity.
JOEX_EXPORT void
    joex_client_set_verbose (joex_client_t *self, bool verbose);

//  Self test of this class.
JOEX_EXPORT void
    joex_client_test (bool verbose);

//  @end

#ifdef __cplusplus
}
#endif

#endif
